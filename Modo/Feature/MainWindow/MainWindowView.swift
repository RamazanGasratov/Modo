//
//  MainWindowView.swift
//  Modo
//
//  Created by –†–∞–º–∞–∑–∞–Ω –ì–∞—Å—Ä–∞—Ç–æ–≤ on 12.05.2025.
//

import Foundation

import EventKit
import Combine

@MainActor
final class CalendarService: ObservableObject {
    @Published var todayTimers: [EventTimer] = []
    
    private let store = EKEventStore()
    private var updateTask: Task<Void, Never>?
    
    init() {
        Task { await request() }
    }
    
    // 1) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
    private func request() async {
        switch EKEventStore.authorizationStatus(for: .event) {
        case .authorized:       startPolling()
        case .notDetermined:
            let ok = try? await store.requestFullAccessToEvents()
            if ok == true { startPolling() }
        default: break
        }
    }
    
    // 2) –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (–∏ –Ω–∞ didChange) –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    private func startPolling() {
        NotificationCenter.default.addObserver(
            forName: .EKEventStoreChanged,
            object: store,
            queue: .main) { [weak self] _ in self?.reload() }
        
        updateTask = Task {
            while !Task.isCancelled {
                reload()
                try? await Task.sleep(for: .seconds(60))
            }
        }
    }
    
    // 3) –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¢–û–õ–¨–ö–û –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    private func reload() {
        let cal = Calendar.current
        let dayStart = cal.startOfDay(for: Date())
        let dayEnd   = cal.date(byAdding: .day, value: 1, to: dayStart)!
                         .addingTimeInterval(-1)
        
        let pred = store.predicateForEvents(withStart: dayStart,
                                            end: dayEnd,
                                            calendars: nil)
        
        // –≤—Å–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É start
        let events = store.events(matching: pred)
            .filter { !$0.isAllDay }
            .sorted { $0.startDate < $1.startDate }
        
        // ‚îÄ‚îÄ —Å—Ç—Ä–æ–∏–º –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –±–µ–∑ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        var cursor = Date()                                   // –∫–æ–≥–¥–∞ ¬´–æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è —ç–∫—Ä–∞–Ω¬ª
        todayTimers = []
        
        for ev in events {
            // –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–∂–µ –ø—Ä–æ—à–ª–æ –¥–æ cursor ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if ev.endDate <= cursor { continue }
            
            let effectiveStart = max(ev.startDate, cursor)
            let effectiveEnd   = effectiveStart
                .addingTimeInterval(ev.endDate.timeIntervalSince(ev.startDate))
            
            cursor = effectiveEnd                            // —Ö–≤–æ—Å—Ç —Å–¥–≤–∏–≥–∞–µ—Ç—Å—è
            
            todayTimers.append(
                EventTimer(event: ev,
                           effectiveStart: effectiveStart,
                           effectiveEnd:   effectiveEnd)
            )
        }
    }
}

struct EventTimer: Identifiable {
    let id    : String
    let title : String
    let start : Date       // —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    let end   : Date
    let color : Color
    
    init(event: EKEvent,
         effectiveStart: Date,
         effectiveEnd:   Date)
    {
        id    = event.eventIdentifier
        title = event.title
        start = effectiveStart
        end   = effectiveEnd
        
        if #available(macOS 14, iOS 17, *) {
            color = Color(event.calendar.color)
        } else {
            let ns = NSColor(cgColor: event.calendar.cgColor) ?? .controlAccentColor
            color = Color(ns)
        }
    }
    
    var duration  : TimeInterval { end.timeIntervalSince(start) }
    var remaining : TimeInterval { max(0, end.timeIntervalSinceNow) }
    var state: TimerState {
        let now = Date()
        if now < start { return .pending }
        if now < end   { return .running }
        return .finished
    }
}
enum TimerState { case pending, running, finished }

import SwiftUI

struct CalendarTimersView: View {
    @StateObject private var calendar = CalendarService()
    @State private var tick = Date()   // —Ç—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    
    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            ForEach(calendar.todayTimers) { timer in
                HStack {
                    Text(timer.title)
                    Spacer()
                    Text(display(timer))
                        .monospacedDigit()
                        .bold()
                        .foregroundStyle(color(timer))
                }
            }
            if calendar.todayTimers.isEmpty {
                Text("üìÖ¬†–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
                    .foregroundStyle(.secondary)
            }
        }
        .padding()
        // —Ç–∏–∫–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã UI –æ–±–Ω–æ–≤–ª—è–ª—Å—è
        .onReceive(Publishers.everySecond) { _ in
            tick = Date()
        }
    }
    
    private func display(_ t: EventTimer) -> String {
        switch t.state {
        case .pending:   return timeString(t.start.timeIntervalSinceNow) + " ‚ñ∂Ô∏é"
        case .running:   return timeString(t.remaining)
        case .finished:  return "‚úì"
        }
    }
    private func color(_ t: EventTimer) -> Color {
        switch t.state {
        case .pending:  .yellow
        case .running:  .green
        case .finished: .secondary
        }
    }
    
    private func timeString(_ ti: TimeInterval) -> String {
        let sec = Int(ti.rounded())
        return String(format: "%02d:%02d", sec/60, sec%60)
    }
}

import Combine
extension Publishers {
    static var everySecond: Publishers.Autoconnect<Timer.TimerPublisher> {
        Timer.publish(every: 1, on: .main, in: .common).autoconnect()
    }
}
